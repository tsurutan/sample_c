function Math.init 0
push constant 0
return
function Math.abs 0
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
neg
push argument 0
call Math.multiply 2
return
goto IF_END0
label IF_FALSE0
push argument 0
return
label IF_END0
function Math.multiply 4
push argument 0
pop local 0
push constant 0
pop local 1
push constant 0
pop local 3
push constant 1
pop local 2
label WHILE_EXP0
push local 1
push constant 16
lt
not
if-goto WHILE_END0
push argument 1
push local 2
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 3
push local 0
add
pop local 3
label IF_FALSE0
push local 0
push local 0
add
pop local 0
push local 1
push constant 1
add
pop local 1
push local 2
push local 2
add
pop local 2
goto WHILE_EXP0
label WHILE_END0
push local 3
return
function Math.divide 5
push argument 0
call Math.abs 1
pop local 1
push argument 1
call Math.abs 1
pop local 2
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
neg
pop local 3
goto IF_END0
label IF_FALSE0
push constant 1
pop local 3
label IF_END0
push argument 1
push constant 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 1
neg
pop local 4
goto IF_END1
label IF_FALSE1
push constant 1
pop local 4
label IF_END1
push local 2
push local 1
gt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
return
goto IF_END2
label IF_FALSE2
push local 1
push constant 2
push local 2
call Math.multiply 2
call Math.divide 2
pop local 0
push local 1
push constant 2
push local 0
call Math.multiply 2
push local 2
call Math.multiply 2
sub
push local 2
lt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 2
push local 0
call Math.multiply 2
push local 3
call Math.multiply 2
push local 4
call Math.multiply 2
return
goto IF_END3
label IF_FALSE3
push constant 2
push local 0
call Math.multiply 2
push constant 1
add
push local 3
call Math.multiply 2
push local 4
call Math.multiply 2
return
label IF_END3
label IF_END2
function Math.sqrt 4
push constant 0
pop local 0
push constant 8
pop local 1
push constant 128
pop local 3
push argument 0
call Math.abs 1
pop local 2
label WHILE_EXP0
push local 1
push constant 0
gt
not
if-goto WHILE_END0
push local 0
push local 3
add
push local 0
push local 3
add
call Math.multiply 2
push constant 0
gt
push local 0
push local 3
add
push local 0
push local 3
add
call Math.multiply 2
push local 2
lt
push local 0
push local 3
add
push local 0
push local 3
add
call Math.multiply 2
push local 2
eq
or
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push local 3
add
pop local 0
label IF_FALSE0
push local 1
push constant 1
sub
pop local 1
push local 3
push constant 2
call Math.divide 2
pop local 3
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Math.max 0
push argument 0
push argument 1
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
return
goto IF_END0
label IF_FALSE0
push argument 1
return
label IF_END0
function Math.min 0
push argument 0
push argument 1
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
return
goto IF_END0
label IF_FALSE0
push argument 0
return
label IF_END0
